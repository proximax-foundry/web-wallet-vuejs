import{B as T,z as u,a9 as w,n as x,w as f,H as I,W as v,S}from"./index-f674c724.js";const o=class{static addZeros(n,t=0){let a;if(n>0){let s;if(t===0)s=this.addDecimals(n),a=`0${s}`;else{const r=t.toString().replace(/,/g,"").split(".");if(r.length<2)s=this.addDecimals(n);else{const e=r[1].split("");s=this.addDecimals(n-e.length,r[1])}a=`${r[0]}${s}`}}else a=t;return a}static addDecimals(n,t="0"){const a="0";if(t==="0")for(let s=0;s<n-1;s++)t+=a;else for(let s=0;s<n;s++)t+=a;return t}};o.createAssetTransaction=(c,n,t,a,s,r)=>{const e=T.buildTxn.mosaicDefinition(c,t,a,s,r?u.UInt64.fromUint(o.calculateDuration(r)):void 0),l=e.toAggregateV1(c);let d=u.MosaicSupplyType.Increase;const g=T.buildTxn.buildMosaicSupplyChange(e.mosaicId,d,u.UInt64.fromUint(o.addZeros(s,n))).toAggregateV1(c);return T.buildTxn.aggregateComplete([l,g])};o.assetSupplyChangeTransaction=(c,n,t,a)=>{const s=T.buildTxn;let r=n=="increase"?u.MosaicSupplyType.Increase:u.MosaicSupplyType.Decrease;return s.buildMosaicSupplyChange(new u.MosaicId(c),r,u.UInt64.fromUint(o.addZeros(a,t)))};o.linkAssetToNamespaceTransaction=(c,n,t)=>{const a=T.buildTxn;let s;return s=t=="link"?u.AliasActionType.Link:u.AliasActionType.Unlink,a.assetAlias(s,new u.NamespaceId(n),new u.MosaicId(c))};o.createAssetTransactionFee=(c,n,t,a,s,r)=>o.createAssetTransaction(c,n,t,a,s,r).maxFee.compact();o.getMosaicSupplyChangeTransactionFee=(c,n,t,a)=>o.assetSupplyChangeTransaction(c,n,t,a).maxFee.compact();o.getLinkAssetToNamespaceTransactionFee=(c,n,t)=>o.linkAssetToNamespaceTransaction(c,n,t).maxFee.compact();o.calculateDuration=c=>{let n=new w(x.chainNetworkName);n.init();let t=parseInt(n.blockGenerationTargetTime),a=60*60*24/t;return Math.floor(c*a)};o.getOwnedAssets=c=>{const n=[],t=f.currentLoggedInWallet.accounts.find(e=>e.address===c),a=f.currentLoggedInWallet.others.find(e=>e.address===c),s=t?t.assets.filter(e=>e.creator===t.publicKey):[],r=a?a.assets.filter(e=>e.creator===a.publicKey):[];return s.length>0&&s.forEach(e=>{n.push({label:e.idHex+" > "+I.amountFormatterSimple(e.amount,e.divisibility),value:e.idHex})}),r.length>0&&r.forEach(e=>{n.push({label:e.idHex+" > "+I.amountFormatterSimple(e.amount,e.divisibility),value:e.idHex})}),n};o.getOwnedAssetsPermutable=c=>{const n=[],t=f.currentLoggedInWallet.accounts.find(e=>e.address===c),a=f.currentLoggedInWallet.others.find(e=>e.address===c),s=t?t.assets.filter(e=>e.creator===t.publicKey&&e.supplyMutable===!0):[],r=a?a.assets.filter(e=>e.creator===a.publicKey&&e.supplyMutable===!0):[];return s.length>0&&s.forEach(e=>{n.push({label:e.idHex+" > "+I.amountFormatterSimple(e.amount,e.divisibility),value:e.idHex})}),r.length>0&&r.forEach(e=>{n.push({label:e.idHex+" > "+I.amountFormatterSimple(e.amount,e.divisibility),value:e.idHex})}),n};o.getSenderAccount=(c,n)=>{const t=u.Address.createFromRawAddress(c),a=f.currentLoggedInWallet.accounts.find(l=>l.address==t.plain()),s=v.createPassword(n);let r=v.decryptPrivateKey(s,a.encrypted,a.iv);return u.Account.createFromPrivateKey(r,T.networkType,1)};o.createAsset=(c,n,t,a,s,r,e,l)=>{let d=o.createAssetTransaction(t,a,s,r,e,l),i=o.getSenderAccount(c,n).preV2Sign(d,x.currentNetworkProfile.generationHash);S.announceTransaction(i)};o.createAssetMultiSig=(c,n,t,a,s,r,e,l)=>{const d=T.buildTxn.mosaicDefinition(t,s,r,e,l?u.UInt64.fromUint(o.calculateDuration(l)):void 0),g=d.toAggregateV1(t);let i;i=u.MosaicSupplyType.Increase;const p=T.buildTxn.buildMosaicSupplyChange(d.mosaicId,i,u.UInt64.fromUint(o.addZeros(e,a))).toAggregateV1(t),A=o.getSenderAccount(c,n),m=[g,p],y=T.buildTxn.aggregateBonded(m),h=A.preV2Sign(y,x.currentNetworkProfile.generationHash);let b=S.lockFundTx(h),k=A.preV2Sign(b,x.currentNetworkProfile.generationHash);S.announceLF_AND_addAutoAnnounceABT(k,h)};o.changeAssetSupply=(c,n,t,a,s,r)=>{let e=o.assetSupplyChangeTransaction(t,a,s,r),d=o.getSenderAccount(c,n).preV2Sign(e,x.currentNetworkProfile.generationHash);S.announceTransaction(d)};o.changeAssetSupplyMultiSig=(c,n,t,a,s,r,e)=>{let l=T.buildTxn,d=o.assetSupplyChangeTransaction(t,a,s,r);const g=o.getSenderAccount(c,n),i=f.currentLoggedInWallet.accounts.find(P=>P.address===e),p=f.currentLoggedInWallet.others.find(P=>P.address===e),A=i?i.publicKey:p.publicKey,m=u.PublicAccount.createFromPublicKey(A,T.networkType),y=[d.toAggregateV1(m)],h=l.aggregateBonded(y),b=g.preV2Sign(h,x.currentNetworkProfile.generationHash);let k=S.lockFundTx(b),N=g.preV2Sign(k,x.currentNetworkProfile.generationHash);S.announceLF_AND_addAutoAnnounceABT(N,b)};o.linkedNamespaceToAsset=(c,n,t,a,s)=>{const r=o.linkAssetToNamespaceTransaction(t,a,s);let l=o.getSenderAccount(c,n).preV2Sign(r,x.currentNetworkProfile.generationHash);S.announceTransaction(l)};o.linkedNamespaceToAssetMultiSig=(c,n,t,a,s,r)=>{let e=T.buildTxn;const l=o.linkAssetToNamespaceTransaction(t,a,s),d=o.getSenderAccount(c,n),g=f.currentLoggedInWallet.accounts.find(N=>N.address===r),i=f.currentLoggedInWallet.others.find(N=>N.address===r),p=g?g.publicKey:i.publicKey,A=u.PublicAccount.createFromPublicKey(p,T.networkType),m=[l.toAggregateV1(A)],y=e.aggregateBonded(m),h=d.preV2Sign(y,x.currentNetworkProfile.generationHash);let b=S.lockFundTx(h),k=d.preV2Sign(b,x.currentNetworkProfile.generationHash);S.announceLF_AND_addAutoAnnounceABT(k,h)};o.listActiveNamespacesToLink=(c,n,t)=>{const a=f.currentLoggedInWallet.accounts.find(i=>i.address===n),s=a?a.namespaces.filter(i=>i.active===!0):[],r=f.currentLoggedInWallet.others.find(i=>i.address===n),e=r?r.namespaces.filter(i=>i.active===!0):[];let l,d;s.length>0?(l=s.length,d=s):(l=e.length,d=e);let g=[];return l>0&&(d.forEach(i=>{console.log(i);const p=i.name.split(".");let A,m="",y="";if(i.linkedId!=""){let h,b;switch(i.linkType){case 1:h="Asset",b=i.linkedId,A=t=="link";break;case 2:h="Address",b=I.createAddress(i.linkedId).pretty(),A=!0;break}m=i.name+" (Linked to "+h+") - "+b,y=i.name}else A=t!="link",m=i.name,y=i.name;t=="link"&&g.push({value:y,label:m,disabled:A,level:p}),t=="unlink"&&i.linkedId==c&&g.push({value:y,label:m,disabled:A,level:p})}),g.sort((i,p)=>i.label>p.label?1:i.label<p.label?-1:0),g.sort((i,p)=>i.level>p.level?1:i.level<p.level?-1:0)),g};let F=o;export{F as A};
