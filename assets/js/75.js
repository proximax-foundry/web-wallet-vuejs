(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[75],{

/***/ "./node_modules/utf-8/src/UTF8.js":
/*!****************************************!*\
  !*** ./node_modules/utf-8/src/UTF8.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n  isNotUTF8: isNotUTF8,\n  getCharLength: getCharLength,\n  getCharCode: getCharCode,\n  getStringFromBytes: getStringFromBytes,\n  getBytesForCharCode: getBytesForCharCode,\n  setBytesFromCharCode: setBytesFromCharCode,\n  setBytesFromString: setBytesFromString,\n};\n\n// non UTF8 encoding detection (cf README file for details)\nfunction isNotUTF8(bytes, byteOffset, byteLength) {\n  try {\n    getStringFromBytes(bytes, byteOffset, byteLength, true);\n  } catch (e) {\n    return true;\n  }\n  return false;\n}\n\nfunction getCharLength(theByte) {\n  // 4 bytes encoded char (mask 11110000)\n  if (0xf0 == (theByte & 0xf0)) {\n    return 4;\n    // 3 bytes encoded char (mask 11100000)\n  } else if (0xe0 == (theByte & 0xe0)) {\n    return 3;\n    // 2 bytes encoded char (mask 11000000)\n  } else if (0xc0 == (theByte & 0xc0)) {\n    return 2;\n    // 1 bytes encoded char\n  } else if (theByte == (theByte & 0x7f)) {\n    return 1;\n  }\n  return 0;\n}\n\n// UTF8 decoding functions\nfunction getCharCode(bytes, byteOffset, charLength) {\n  var charCode = 0,\n    mask = '';\n  byteOffset = byteOffset || 0;\n  // validate that the array has at least one byte in it\n  if (bytes.length - byteOffset <= 0) {\n    throw new Error('No more characters remaining in array.');\n  }\n  // Retrieve charLength if not given\n  charLength = charLength || getCharLength(bytes[byteOffset]);\n  if (charLength == 0) {\n    throw new Error(\n      bytes[byteOffset].toString(2) +\n        ' is not a significative' +\n        ' byte (offset:' +\n        byteOffset +\n        ').'\n    );\n  }\n  // Return byte value if charlength is 1\n  if (1 === charLength) {\n    return bytes[byteOffset];\n  }\n  // validate that the array has enough bytes to make up this character\n  if (bytes.length - byteOffset < charLength) {\n    throw new Error(\n      'Expected at least ' + charLength + ' bytes remaining in array.'\n    );\n  }\n  // Test UTF8 integrity\n  mask = '00000000'.slice(0, charLength) + 1 + '00000000'.slice(charLength + 1);\n  if (bytes[byteOffset] & parseInt(mask, 2)) {\n    throw Error(\n      'Index ' +\n        byteOffset +\n        ': A ' +\n        charLength +\n        ' bytes' +\n        ' encoded char' +\n        ' cannot encode the ' +\n        (charLength + 1) +\n        'th rank bit to 1.'\n    );\n  }\n  // Reading the first byte\n  mask = '0000'.slice(0, charLength + 1) + '11111111'.slice(charLength + 1);\n  charCode += (bytes[byteOffset] & parseInt(mask, 2)) << (--charLength * 6);\n  // Reading the next bytes\n  while (charLength) {\n    if (\n      0x80 !== (bytes[byteOffset + 1] & 0x80) ||\n      0x40 === (bytes[byteOffset + 1] & 0x40)\n    ) {\n      throw Error(\n        'Index ' +\n          (byteOffset + 1) +\n          ': Next bytes of encoded char' +\n          ' must begin with a \"10\" bit sequence.'\n      );\n    }\n    charCode += (bytes[++byteOffset] & 0x3f) << (--charLength * 6);\n  }\n  return charCode;\n}\n\nfunction getStringFromBytes(bytes, byteOffset, byteLength, strict) {\n  var charLength,\n    chars = [];\n  byteOffset = byteOffset | 0;\n  byteLength =\n    'number' === typeof byteLength\n      ? byteLength\n      : bytes.byteLength || bytes.length;\n  for (; byteOffset < byteLength; byteOffset++) {\n    charLength = getCharLength(bytes[byteOffset]);\n    if (byteOffset + charLength > byteLength) {\n      if (strict) {\n        throw Error(\n          'Index ' +\n            byteOffset +\n            ': Found a ' +\n            charLength +\n            ' bytes encoded char declaration but only ' +\n            (byteLength - byteOffset) +\n            ' bytes are available.'\n        );\n      }\n    } else {\n      chars.push(\n        String.fromCodePoint(getCharCode(bytes, byteOffset, charLength, strict))\n      );\n    }\n    byteOffset += charLength - 1;\n  }\n  return chars.join('');\n}\n\n// UTF8 encoding functions\nfunction getBytesForCharCode(charCode) {\n  if (charCode < 128) {\n    return 1;\n  } else if (charCode < 2048) {\n    return 2;\n  } else if (charCode < 65536) {\n    return 3;\n  } else if (charCode < 2097152) {\n    return 4;\n  }\n  throw new Error('CharCode ' + charCode + ' cannot be encoded with UTF8.');\n}\n\nfunction setBytesFromCharCode(charCode, bytes, byteOffset, neededBytes) {\n  charCode = charCode | 0;\n  bytes = bytes || [];\n  byteOffset = byteOffset | 0;\n  neededBytes = neededBytes || getBytesForCharCode(charCode);\n  // Setting the charCode as it to bytes if the byte length is 1\n  if (1 == neededBytes) {\n    bytes[byteOffset] = charCode;\n  } else {\n    // Computing the first byte\n    bytes[byteOffset++] =\n      (parseInt('1111'.slice(0, neededBytes), 2) << (8 - neededBytes)) +\n      (charCode >>> (--neededBytes * 6));\n    // Computing next bytes\n    for (; neededBytes > 0; ) {\n      bytes[byteOffset++] = ((charCode >>> (--neededBytes * 6)) & 0x3f) | 0x80;\n    }\n  }\n  return bytes;\n}\n\nfunction setBytesFromString(string, bytes, byteOffset, byteLength, strict) {\n  string = string || '';\n  bytes = bytes || [];\n  byteOffset = byteOffset | 0;\n  byteLength =\n    'number' === typeof byteLength ? byteLength : bytes.byteLength || Infinity;\n  for (var i = 0, j = string.length; i < j; i++) {\n    var neededBytes = getBytesForCharCode(string[i].codePointAt(0));\n    if (strict && byteOffset + neededBytes > byteLength) {\n      throw new Error(\n        'Not enought bytes to encode the char \"' +\n          string[i] +\n          '\" at the offset \"' +\n          byteOffset +\n          '\".'\n      );\n    }\n    setBytesFromCharCode(\n      string[i].codePointAt(0),\n      bytes,\n      byteOffset,\n      neededBytes,\n      strict\n    );\n    byteOffset += neededBytes;\n  }\n  return bytes;\n}\n\n\n//# sourceURL=webpack:///./node_modules/utf-8/src/UTF8.js?");

/***/ })

}]);